{"version":3,"file":"static/js/181.3ff731fc.chunk.js","mappings":"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","sources":["components/SectionName/SectionName.styled.jsx","components/SectionName/SectionName.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","redux/filter/filter-selectors.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","utils/sortContactsByName.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/PhoneBookPage/PhoneBookPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const SubTitle = styled.h2`\n  margin-bottom: 20px;\n  font-size: 30px;\n  text-transform: uppercase;\n  color: #3498db;\n`;\n","import PropTypes from 'prop-types';\nimport { SubTitle } from './SectionName.styled';\n\nexport default function SectionName({ title }) {\n    return (\n        <>\n            {title && <SubTitle>{title}</SubTitle>}\n        </>\n    );\n};\n\nSectionName.propTypes = {\n    title: PropTypes.string,\n};","import styled from '@emotion/styled';\n\nexport const FormWrapper = styled.div`\n  margin-bottom: 40px;\n`;\n\nexport const ContactSubmitForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  border: 1px solid darkgray;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0px 2px 10px -3px;\n`;\n\nexport const FormInputLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin: 20px 20px 0px 20px;\n  font-size: 24px;\n`;\n\nexport const FormInput = styled.input`\n  width: 300px;\n  margin-top: 4px;\n  padding: 4px;\n  font-size: 16px;\n  border: 2px solid #3498db;\n  border-radius: 5px;\n  background-color: ghostwhite;\n`;\n\nexport const FormSubmitBtn = styled.button`\n  width: 160px;\n  height: 50px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  font-size: 18px;\n  text-transform: uppercase;\n  border: 0px;\n  border-radius: 20px;\n  background-color: #3498db;\n  color: white;\n  box-shadow: none;\n  transition: all 250ms ease-in-out;\n\n  :hover,\n  :focus {\n    background-color: #39b0ff;\n    box-shadow: 0px 4px 4px #00000026, inset 0px 0px 0px 0px #0000004d;\n  }\n\n  :disabled {\n    background-color: #4e95c4;\n  }\n`;\n","import { useState } from 'react';\nimport {\n  useGetAllContactsQuery,\n  useAddContactMutation,\n} from 'services/phoneBookApi';\nimport { nanoid } from '@reduxjs/toolkit';\nimport {\n  showInfoMessage,\n  showSuccessMessage,\n  showErrorMessage,\n} from 'utils/notifications';\nimport {\n  FormWrapper,\n  ContactSubmitForm,\n  FormInputLabel,\n  FormInput,\n  FormSubmitBtn,\n} from './ContactForm.styled';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const { data: contacts } = useGetAllContactsQuery();\n  const [addContact, { isLoading: isCreating }] = useAddContactMutation();\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const onInputChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'number':\n        return setNumber(value);\n      default:\n        return;\n    }\n  };\n\n  const formReset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const onContactFormSubmit = async evt => {\n    evt.preventDefault();\n\n    if (\n      contacts.find(\n        contact =>\n          contact.name.toLowerCase() === name.toLowerCase() &&\n          contact.number === number\n      )\n    ) {\n      showInfoMessage('This contact is already in your phone book');\n      return;\n    }\n\n    if (contacts.find(contact => contact.number === number)) {\n      showInfoMessage('This phone number is already in your phone book');\n      return;\n    }\n\n    const newContact = {\n      name,\n      number,\n    };\n\n    try {\n      await addContact(newContact);\n      showSuccessMessage('New contact has been added in your phone book');\n    } catch (error) {\n      console.log(error.message);\n      showErrorMessage('Something goes wrong, new contact was not created');\n    }\n\n    formReset();\n  };\n\n  return (\n    <FormWrapper>\n      <ContactSubmitForm onSubmit={onContactFormSubmit}>\n        <FormInputLabel htmlFor={nameInputId}>\n          Name\n          <FormInput\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Type name here\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            value={name}\n            onChange={onInputChange}\n            id={nameInputId}\n            required\n          />\n        </FormInputLabel>\n\n        <FormInputLabel htmlFor={numberInputId}>\n          Number\n          <FormInput\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Type number here\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            value={number}\n            onChange={onInputChange}\n            id={numberInputId}\n            required\n          />\n        </FormInputLabel>\n\n        <FormSubmitBtn type=\"submit\" disabled={isCreating}>\n          {isCreating ? 'Adding...' : 'Add contact'}\n        </FormSubmitBtn>\n      </ContactSubmitForm>\n    </FormWrapper>\n  );\n}\n","export const getFilterValue = state => state.filter.value;\n","import styled from '@emotion/styled';\n\nexport const FilterWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  border: 1px solid darkgray;\n  background-color: white;\n  box-shadow: 0px 2px 10px -3px;\n  border-radius: 5px;\n  width: 354px;\n`;\n\nexport const FilterInputLabel = styled.label`\n  margin: 10px 20px 10px 20px;\n  font-size: 18px;\n`;\n\nexport const FilterInput = styled.input`\n  width: 300px;\n  margin-top: 4px;\n  padding: 4px;\n  font-size: 16px;\n  border: 2px solid #3498db;\n  border-radius: 5px;\n  background-color: ghostwhite;\n`;","import { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { changeFilter } from 'redux/filter/filter-slice';\nimport { getFilterValue } from 'redux/filter/filter-selectors';\nimport { FilterWrapper, FilterInputLabel, FilterInput } from './Filter.styled';\n\nexport default function Filter() {\n  const filterValue = useSelector(getFilterValue);\n  const dispatch = useDispatch();\n\n  const filterInputId = nanoid();\n\n  const onFilterChange = evt => {\n    dispatch(changeFilter(evt.currentTarget.value));\n  };\n\n  return (\n    <FilterWrapper>\n      <FilterInputLabel htmlFor={filterInputId}>\n        Find contacts by name\n        <FilterInput\n          type=\"text\"\n          placeholder=\"Search field\"\n          id={filterInputId}\n          value={filterValue}\n          onChange={onFilterChange}\n        />\n      </FilterInputLabel>\n    </FilterWrapper>\n  );\n}\n","export default function sortContactsByName(a, b) {\n    return a.name.localeCompare(b.name);\n};","import styled from '@emotion/styled';\n\nexport const ContactItemWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 420px;\n  height: 50px;\n  border: 1px solid darkgray;\n  border-radius: 5px;\n  background-color: white;\n`;\n\nexport const ContactItemName = styled.p`\n  margin-left: 20px;\n  font-size: 18px;\n`;\n\nexport const ContactItemNum = styled.a`\n  margin-left: auto;\n  font-size: 18px;\n  text-decoration: none;\n  transition: all 250ms ease-in-out;\n\n  :hover,\n  :focus {\n    color: #39b0ff;\n  }\n`;\n\nexport const DeleteBtn = styled.button`\n  height: 27px;\n  padding: 0;\n  margin: 0 20px 0 50px;\n  color: #3498db;\n  background-color: transparent;\n  border: none;\n  transition: all 250ms ease-in-out;\n\n  :hover,\n  :focus {\n    color: #ff3939;\n  }\n\n  :disabled {\n    color: #4e95c4;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDeleteContactMutation } from 'services/phoneBookApi';\nimport { showSuccessMessage, showErrorMessage } from 'utils/notifications';\nimport { FaTrashAlt, FaSpinner } from 'react-icons/fa';\nimport { IconContext } from 'react-icons';\nimport {\n  ContactItemWrapper,\n  ContactItemName,\n  ContactItemNum,\n  DeleteBtn,\n} from './ContactItem.styled';\n\nexport default function ContactItem({ id, name, number }) {\n  const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\n\n  const onContactDelete = async (contactId, contactName) => {\n    try {\n      await deleteContact(contactId);\n      showSuccessMessage(\n        `\"${contactName}\" has been deleted from your phone book`\n      );\n    } catch (error) {\n      console.log(error.message);\n      showErrorMessage(\n        `Something goes wrong, \"${contactName}\" was not deleted`\n      );\n    }\n  };\n\n  return (\n    <ContactItemWrapper>\n      <ContactItemName>{name}</ContactItemName>\n      <ContactItemNum href={`tel:${number}`}>{number}</ContactItemNum>\n      <DeleteBtn\n        type=\"button\"\n        onClick={() => onContactDelete(id, name)}\n        disabled={isDeleting}\n        aria-label=\"Delete contact\"\n      >\n        <IconContext.Provider value={{ size: '2em' }}>\n          {isDeleting ? <FaSpinner /> : <FaTrashAlt />}\n        </IconContext.Provider>\n      </DeleteBtn>\n    </ContactItemWrapper>\n  );\n}\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const TotalContactsText = styled.p`\n  font-size: 18px;\n`;\n\nexport const TotalContactsNum = styled.span`\n  margin-left: 4px;\n  color: blue;\n`;\n\nexport const PhoneBookList = styled.ul`\n  margin-top: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 460px;\n  border: 1px solid darkgray;\n  border-radius: 5px;\n  background-color: white;\n  box-shadow: 0px 2px 10px -3px;\n`;\n\nexport const ListElement = styled.li`\n  :first-of-type {\n    padding-top: 20px;\n  }\n\n  :last-child {\n    padding-bottom: 20px;\n  }\n\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const LoaderItem = styled.p`\n  font-size: 24px;\n  color: darkgray;\n`;\n\nexport const NoMatchesText = styled.p`\n  margin: 20px 0;\n  font-size: 18px;\n`;\n\nexport const NoContactsText = styled.p`\n  font-size: 18px;\n`;\n\nexport const FetchErrorText = styled.p`\n  margin-top: 20px;\n  font-size: 18px;\n`;\n\nexport const RefetchBtn = styled.button`\n  display: block;\n  padding: 0;\n  margin-top: 20px;\n  color: #3498db;\n  background-color: transparent;\n  border: none;\n  transition: all 250ms ease-in-out;\n\n  :hover,\n  :focus {\n    color: #39b0ff;\n  }\n`;\n","import { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getFilterValue } from 'redux/filter/filter-selectors';\nimport { useGetAllContactsQuery } from 'services/phoneBookApi';\nimport sortContactsByName from 'utils/sortContactsByName';\nimport ContactItem from 'components/ContactItem';\nimport { FaRedo } from 'react-icons/fa';\nimport { IconContext } from 'react-icons';\nimport {\n  TotalContactsText,\n  TotalContactsNum,\n  PhoneBookList,\n  ListElement,\n  LoaderItem,\n  NoMatchesText,\n  NoContactsText,\n  FetchErrorText,\n  RefetchBtn,\n} from './ContactList.styled';\n\nexport default function ContactList() {\n  const {\n    data: contacts,\n    isLoading,\n    isError,\n    refetch,\n  } = useGetAllContactsQuery();\n\n  const filterValue = useSelector(getFilterValue);\n\n  const totalContactsAmount = () => {\n    if (!contacts) {\n      return 0;\n    }\n    return contacts.length;\n  };\n\n  const getVisibleContacts = useMemo(\n    () => () => {\n      if (!contacts) {\n        return;\n      }\n\n      const normalizedFilter = filterValue.toLowerCase().trim();\n\n      return contacts\n        .filter(\n          contact =>\n            contact.name.toLowerCase().includes(normalizedFilter) ||\n            contact.number.includes(normalizedFilter)\n        )\n        .sort(sortContactsByName);\n    },\n    [contacts, filterValue]\n  );\n\n  const visibleContacts = getVisibleContacts();\n\n  return (\n    <>\n      {isLoading ? (\n        <LoaderItem>Loading...</LoaderItem>\n      ) : totalContactsAmount() > 0 ? (\n        <>\n          <TotalContactsText>\n            Contacts amount:{' '}\n            <TotalContactsNum>{totalContactsAmount()}</TotalContactsNum>\n          </TotalContactsText>\n          <PhoneBookList>\n            {visibleContacts.length ? (\n              visibleContacts.map(({ id, name, number }) => (\n                <ListElement key={id}>\n                  <ContactItem id={id} name={name} number={number} />\n                </ListElement>\n              ))\n            ) : (\n              <NoMatchesText>No contact matches</NoMatchesText>\n            )}\n          </PhoneBookList>\n        </>\n      ) : (\n        <>\n          <NoContactsText>\n            There are no contacts in your phone book\n          </NoContactsText>\n        </>\n      )}\n      {isError && (\n        <>\n          <FetchErrorText>Fetch error! Refetch contacts</FetchErrorText>\n          <RefetchBtn type=\"button\" onClick={() => refetch()}>\n            <IconContext.Provider value={{ size: '5em' }}>\n              <FaRedo />\n            </IconContext.Provider>\n          </RefetchBtn>\n        </>\n      )}\n    </>\n  );\n}\n","import SectionName from 'components/SectionName';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\n\nexport default function PhoneBookPage() {\n  return (\n    <>\n      <SectionName title=\"Add contact\" />\n      <ContactForm />\n      <SectionName title=\"Contacts\" />\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n"],"names":["SubTitle","styled","SectionName","title","FormWrapper","ContactSubmitForm","FormInputLabel","FormInput","FormSubmitBtn","ContactForm","useState","name","setName","number","setNumber","contacts","useGetAllContactsQuery","data","useAddContactMutation","addContact","isCreating","isLoading","nameInputId","nanoid","numberInputId","onInputChange","target","value","onContactFormSubmit","evt","preventDefault","find","contact","toLowerCase","showInfoMessage","newContact","showSuccessMessage","console","log","message","showErrorMessage","onSubmit","htmlFor","type","placeholder","pattern","onChange","id","required","disabled","getFilterValue","state","filter","FilterWrapper","FilterInputLabel","FilterInput","Filter","filterValue","useSelector","dispatch","useDispatch","filterInputId","changeFilter","currentTarget","sortContactsByName","a","b","localeCompare","ContactItemWrapper","ContactItemName","ContactItemNum","DeleteBtn","ContactItem","useDeleteContactMutation","deleteContact","isDeleting","onContactDelete","contactId","contactName","href","onClick","size","TotalContactsText","TotalContactsNum","PhoneBookList","ListElement","LoaderItem","NoMatchesText","NoContactsText","FetchErrorText","RefetchBtn","ContactList","isError","refetch","totalContactsAmount","length","visibleContacts","useMemo","normalizedFilter","trim","includes","sort","getVisibleContacts","map","PhoneBookPage"],"sourceRoot":""}